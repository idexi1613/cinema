import os
import sqlite3
import psycopg
from psycopg.rows import dict_row
from dataclasses import astuple
from contextlib import closing
from sqlite_utils import transform_data
from postgres_utils import load_data, test_transfer
from datetime import datetime
from data_config import dsl
from data_config import tables


db_path = os.getenv('DB_PATH')

if __name__ == '__main__':
    with closing(sqlite3.connect(db_path)) as sqlite_conn, closing(psycopg.connect(**dsl)) as pg_conn:
        sqlite_conn.row_factory = sqlite3.Row
        with closing(sqlite_conn.cursor()) as sqlite_cur, closing(pg_conn.cursor(row_factory=dict_row)) as pg_cur:

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
            def replace_empty_and_convert_to_date(record):
                """–ó–∞–º–µ–Ω—è–µ—Ç –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ None –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç datetime –≤ date"""
                processed_record = []
                for value in record:
                    if value == '':
                        processed_record.append(None)  # –ó–∞–º–µ–Ω—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ None
                    elif isinstance(value, datetime):
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ date
                        processed_record.append(value.date())
                    else:
                        processed_record.append(value)
                return tuple(processed_record)

            # –ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã
            for table_name, dataclass_type in tables.items():
                print(f"–ü–µ—Ä–µ–Ω–æ—Å –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã {table_name}")

                # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ dataclass
                columns = [field for field in dataclass_type.__annotations__.keys()]

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                for batch in transform_data(sqlite_cur, dataclass_type, table_name):
                    batch_as_tuples = [astuple(record) for record in batch]
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –≤ batch
                    batch_as_tuples = [replace_empty_and_convert_to_date(record) for record in batch_as_tuples]

                    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –≤—Å—Ç–∞–≤–∫–æ–π
                    for record in batch_as_tuples:
                        print(f'–ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏: {record}')

                    # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ PostgreSQL
                    load_data(pg_cur, table_name, batch_as_tuples, columns)

                # –§–∏–∫—Å–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ PostgreSQL
                pg_conn.commit()

                # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö
                test_transfer(sqlite_cur, pg_cur, table_name)

    print('üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã !!!')
